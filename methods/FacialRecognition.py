# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'FacialRecognition.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

# from other_methods import encode_faces

from PyQt5 import QtCore, QtGui, QtWidgets

from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtMultimedia import *
from PyQt5.QtMultimediaWidgets import *

import numpy as np
import cv2
import face_recognition as fr
from glob import glob
import pickle
from other_methods import utility
import random
from other_methods import define_constants as const

import datetime as dtime
import threading
import time as ttime

from gaze_tracking import GazeTracking

import firebase_admin
from firebase_admin import credentials
from firebase_admin import firestore

import datetime as dtime

from random import randrange

import subprocess

### Firebase Setting ###
cred = credentials.Certificate('json/Admin_SDK.json')
firebase_admin.initialize_app(cred)
db = firestore.client()

class FaceRecognitionClass(object):
    def __init__(self, name, date, time, input_code=[]):
        self.name = name
        self.date = date
        self.time = time
        self.input_code = input_code

class StatusClass(object):
    def __init__(self, warning_data, status, detected, amount):
        self.warning_data = warning_data
        self.status = status
        self.detected = detected
        self.amount = amount

class RealClass(object):
    def __init__(self, flag, count_times, blink_flag, real_list=[]):
        self.flag = flag
        self.count_times = count_times
        self.blink_flag = False
        self.real_list = real_list
        
class RegisterClass(object):
    def __init__(self, name, password=[]):
        self.name = name
        self.password = password

class ResultClass(object):
    def __init__(self, name, date, time):
        self.name = name
        self.date = date
        self.time = time

### Date and Time Instance ###

dateTime = dtime.datetime.now()

## Shared Object ##

face_data = FaceRecognitionClass(
    "-", 
    dtime.datetime.now().date().strftime('%d %b %Y'), 
    dtime.datetime.now().time().strftime('%H:%M:%S')
)

status_data = StatusClass(
    "",
    "-",
    "-",
    0
)

real_data = RealClass(False, 0, False, list())

### Adding Data ###

# Date and Time Getting (Now)
date = dtime.datetime.now().date().strftime('%d %b %Y'), 
time = dtime.datetime.now().time().strftime('%H:%M:%S'),

# Face Detection Password Getting (4-Digit)
now_pw = ['C', 'L', 'R', 'L']

class VideoThread(QThread):
    change_pixmap_signal = pyqtSignal(np.ndarray)
        
    def run(self):

        ### 1.) Face Detection => Identify People ###
        ### 2.) Eye Detection => Identify Password ###
        ### 3.) Database => Save Data ###

        print('-----------------------------------------------------\n')

        # Load data from pickle file (n_people)
        with open('assets/pickles/n_people.pk', 'rb') as pickle_file:
            n_people_in_pickle = pickle.load(pickle_file)
        print(f"Number of files that should be in '{const.PEOPLE_DIR}' directory : {n_people_in_pickle}")

        # Read all images
        people = glob(const.PEOPLE_DIR + '/*.*')
        print(f"Number of files in '{const.PEOPLE_DIR}' directory : {len(people)}")

        # Check if number of files in PEOPLE_DIR is same as value in pickle file
        if n_people_in_pickle == len(people):
            # Get names
            names = list(map(utility.get_names, people))

            # Get encodings
            face_encode = np.load('assets/face_encodings/data.npy')

            # Initiate Webcam
            print("\nInitiating camera...\n")
            # cap = cv2.VideoCapture(const.n_camera)            
            cap = cv2.VideoCapture('videos/CEN_RIGHT_RIGHT_RIGHT.mp4')

            # Constants for eye blink detection
            eye_blink_counter = 0
            eye_blink_total = 0
            random_blink_number = random.randint(const.n_min_eye_blink,const.n_max_eye_blink)
            frame_current_name = "Unknown"

            gaze = GazeTracking()
            # webcam = cv2.VideoCapture(0)
            now = ""
            before = ""
            sequence = [""]
            now_sequence = [""]

            while 1:

                # Read Frames
                ret, frame = cap.read()
                
                # frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

                # Get Face locations, landmarks and encodings
                frame_face_loc = fr.face_locations(frame)
                frame_face_landmarks = fr.face_landmarks(frame, frame_face_loc)
                frame_face_encode = fr.face_encodings(frame, frame_face_loc)

                # Iterate through locations, landmarks and encodings
                for index, (loc, encode, landmark) in enumerate(zip(frame_face_loc, frame_face_encode, frame_face_landmarks)):

                    # Find index match
                    # is_face_same = fr.compare_faces(face_encode, encode)
                    score = fr.face_distance(face_encode, encode)
                    index_match = np.argmin(score)

                    # Check if min(score) is < face_recognition_threshold
                    if np.min(score) < const.face_recognition_threshold:
                        # Store name temporarily to check if frame_current_name matches with temp_name
                        temp_name = frame_current_name
                        # Store new name
                        frame_current_name = names[index_match]
                    else:
                        frame_current_name = "Unknown"
                    
                    # If frame_current_name is Unknown don't detect eye (and record attendence)
                    if not frame_current_name == "Unknown":
                        # Eye blink detection
                        left_eye_points = np.array(landmark['left_eye'], dtype=np.int32)
                        right_eye_points = np.array(landmark['right_eye'], dtype=np.int32)

                        # EAR_left = get_EAR_ratio(left_eye)
                        # EAR_right = get_EAR_ratio(right_eye)
                        EAR_avg = ( utility.get_EAR_ratio(left_eye_points) + utility.get_EAR_ratio(right_eye_points) ) / 2

                        # Check if EAR ratio is less than threshold
                        if EAR_avg < const.EAR_ratio_threshold:
                            eye_blink_counter += 1
                        else:
                            # Check if counter is greater than min_frames_eyes_closed threshold
                            if eye_blink_counter >= const.min_frames_eyes_closed:
                                eye_blink_total += 1

                            # Reset eye blink counter
                            eye_blink_counter = 0

                        # If temp_name doesn't matches with frame_current_name, reset eye_blink_total and set new random_blink_number
                        if temp_name != frame_current_name:
                            eye_blink_total = 0
                            # random_blink_number = random.randint(const.n_min_eye_blink,const.n_max_eye_blink)
                            random_blink_number = 3

                        # Set messages and face box color
                        blink_message = f"Blink {random_blink_number} times, blinks:{eye_blink_total}"
                        # If name is recorded, display Next person, else don't display anything
                        if utility.check_is_name_recorded(frame_current_name):
                            # attendence_message = f"{frame_current_name} your attendence is already recorded"
                            attendence_message = "Next Person"
                        else:
                            attendence_message = ""
                        face_box_color = const.default_face_box_color

                        # If random_blink_number and total blink number matches, then record attendence
                        if random_blink_number == eye_blink_total:
                            
                            # Record Attendence only if score is atmost 0.6
                            if np.min(score) < const.face_recognition_threshold:
                                real_data.blink_flag = True
                                # print(real_data.blink_flag)
                                utility.record_attendence(frame_current_name)
                                face_box_color = const.success_face_box_color # Set face box color to green for one frame
                                # Reset random_blink_number, and eye blink constants
                                # random_blink_number = random.randint(const.n_min_eye_blink,const.n_max_eye_blink)
                                random_blink_number = 3
                                eye_blink_total = 0
                                eye_blink_counter = 0
                                

                        # real_data.blink_flag = False
                        # Draw Eye points and display blink_message and attendence_message
                        # cv2.polylines(frame, [left_eye_points], True, const.eye_color , 1)
                        # cv2.polylines(frame, [right_eye_points], True, const.eye_color , 1)
                        cv2.putText(frame,blink_message,(10,50),cv2.FONT_HERSHEY_PLAIN,1.5,const.text_in_frame_color,2)
                        # cv2.putText(frame,attendence_message,(20,450),cv2.FONT_HERSHEY_PLAIN,2,const.text_in_frame_color,2)
                        
                    else:
                        # Set face_box_color for unknown face
                        face_box_color = const.unknown_face_box_color

                    # # Draw Reactangle around faces with their names
                    cv2.rectangle(frame,(loc[3],loc[0]),(loc[1],loc[2]),face_box_color,2) # top-right, bottom-left
                    cv2.putText(frame,frame_current_name,(loc[3],loc[0]-3),cv2.FONT_HERSHEY_PLAIN,2,const.text_in_frame_color,2)
                    

                
                gaze.refresh(frame)

                # frame = gaze.annotated_frame()
                text = ""

                if gaze.is_blinking() and now != "B":
                    text = "Blinking"
                    before = now
                    if sequence[(len(sequence)-1)] != before:
                        sequence.append(before)
                        
                        if real_data.flag == True and len(real_data.real_list) < 4:
                            real_data.real_list.append(before)
                            print(real_data.real_list, end=" : ")
                            print(real_data.flag)

                    now = "B"
                else:
                    if gaze.is_right():
                        text = "Looking Right"
                        now = "R"
                    if gaze.is_left():
                        text = "Looking Left"
                        now = "L"
                    if gaze.is_center():
                        text = "Looking Center"
                        now = "C"

                # cv2.putText(frame, text, (90, 60), cv2.FONT_HERSHEY_DUPLEX, 1.6, (147, 58, 31), 2)

                left_pupil = gaze.pupil_left_coords()
                right_pupil = gaze.pupil_right_coords()
                # cv2.putText(frame, "Left pupil:  " + str(left_pupil), (90, 130), cv2.FONT_HERSHEY_DUPLEX, 0.9, (147, 58, 31), 1)
                # cv2.putText(frame, "Right pupil: " + str(right_pupil), (90, 165), cv2.FONT_HERSHEY_DUPLEX, 0.9, (147, 58, 31), 1)

                # cv2.imshow("Demo", frame)
                print(sequence, len(sequence))
                # if cv2.waitKey(1) == 27:
                #     break

                # Display frame
                # cv2.imshow("Webcam (Press q to quit)", frame)
                if ret:
                    self.change_pixmap_signal.emit(frame)

                # The 1st Time For getting name from Facial Recognition  
                user_name = str(frame_current_name)
                
                if "-" in face_data.name and user_name == "Unknown": 
                    status_data.warning_data  = "กรุณามองกล้อง เพื่อทำการตรวจสอบบุคคลด้วยใบหน้า"
                elif "-" in face_data.name and user_name != "Unknown": 
                    face_data.name = user_name
                    status_data.warning_data  = "กรุณาตรวจสอบชื่อของท่าน หากถูกต้อง ให้ทำการ กะพริบตา 3 ครั้ง หรือกด ยืนยัน"
                else:
                    face_data.name = face_data.name 

                print(face_data.name)                     
                # status_data.status = text
                # status_data.status = sequence[1:len(sequence)]
                status_data.status = "".join(real_data.real_list)
                

                if cv2.waitKey(1) & 0xFF == ord('q'):
                    break
        else:
            print(f"Run encode_faces.py to encode all faces in '{const.PEOPLE_DIR}' directory...")

        # while True:
        #     # We get a new frame from the webcam
        #     # _, frame = cap.read()

        #     # We send this frame to GazeTracking to analyze it)

class Ui_MainWindow(QMainWindow):
    def __init__(self):
        super().__init__() 
        self.display_width = 1024
        self.display_height = 768
        self.setupUi(self)
        
        # Flag For Checking About Name Changing
        self.ever_change = False

        self.list_amount = 1

        # create the video capture thread
        self.thread = VideoThread()
        # connect its signal to the update_image slot
        self.thread.change_pixmap_signal.connect(self.update_image)
        # start the thread
        self.thread.start()
        # self.name = self.thread.getName()

        # Data Thread Timer (For Real Time Data)
        self.timer = QTimer(self)
        self.timer.setSingleShot(False)
        self.timer.timeout.connect(self.update_time)
        self.timer.timeout.connect(self.update_name)
        self.timer.timeout.connect(self.update_warning)
        self.timer.timeout.connect(self.update_status)
        self.timer.timeout.connect(self.update_detected)
        self.timer.timeout.connect(self.update_amount)
        self.timer.timeout.connect(self.update_textbox)
        self.timer.timeout.connect(self.update_point)
        self.timer.timeout.connect(self.check_blink)
        self.timer.start(500)

        # self.update_name()
        # self.timer_2 = QTimer(self)
        # self.timer_2.setSingleShot(True)
        # self.timer_2.timeout.connect(self.update_name)

    @pyqtSlot(np.ndarray)
    def update_image(self, cv_img):
        """Updates the image_label with a new opencv image"""
        qt_img = self.convert_cv_qt(cv_img)
        self.FacialRecognitionScreen.setPixmap(qt_img)
        self.FacialRecognitionScreen2.setPixmap(qt_img)

    def convert_cv_qt(self, cv_img):
        """Convert from an opencv image to QPixmap"""
        rgb_image = cv2.cvtColor(cv_img, cv2.COLOR_BGR2RGB)
        h, w, ch = rgb_image.shape
        bytes_per_line = ch * w
        convert_to_Qt_format = QtGui.QImage(rgb_image.data, w, h, bytes_per_line, QtGui.QImage.Format_RGB888)
        p = convert_to_Qt_format.scaled(self.display_width, self.display_height, Qt.KeepAspectRatio)
        return QPixmap.fromImage(p)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(1920, 1080)
        MainWindow.setMinimumSize(QtCore.QSize(1920, 1080))
        MainWindow.setMaximumSize(QtCore.QSize(1920, 1080))
        # MainWindow.saveGeometry(0, 0, 1920, 1080)
        MainWindow.setWindowFlag(Qt.FramelessWindowHint) # Set Hide Windows Tab
        MainWindow.move(0, 0) # Set Default of Windows Position
        MainWindow.setMouseTracking(False)
        MainWindow.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        MainWindow.setAcceptDrops(False)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("images/favicon.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setStatusTip("")
        MainWindow.setAutoFillBackground(False)
        MainWindow.setStyleSheet("background-color: rgb(255, 255, 255);")
        MainWindow.setAnimated(True)
        MainWindow.setTabShape(QtWidgets.QTabWidget.Rounded)
        MainWindow.setUnifiedTitleAndToolBarOnMac(False)
        
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.swapScreen = QStackedLayout()

        # wid0 is Main Page
        self.wid0 = QWidget()
        self.FacialRecognitionScreen = QtWidgets.QLabel(self.wid0)
        self.FacialRecognitionScreen.setGeometry(QtCore.QRect(175, 190, 1024, 768))
        self.FacialRecognitionScreen.setStyleSheet("background-color: rgb(0, 0, 0);\n"
"border-style: solid;\n"
"border-color: rgb(210, 210, 210);\n"
"border-width: 10px;\n"
"border-radius: 20px;")
        self.FacialRecognitionScreen.setObjectName("FacialRecognitionScreen")
        self.FacialRecognitionBorder = QtWidgets.QLabel(self.wid0)
        self.FacialRecognitionBorder.setGeometry(QtCore.QRect(175, 190, 1024, 768))
        self.FacialRecognitionBorder.setStyleSheet("background-color: transparent;\n"
"border-style: solid;\n"
"border-color: rgb(210, 210, 210);\n"
"border-width: 10px;\n"
"border-radius: 20px;")
        self.FacialRecognitionBorder.setObjectName("FacialRecognitionBorder")
        
        self.verticalLayoutWidget = QtWidgets.QWidget(self.wid0)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(1450, 450, 300, 300))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")

        self.DataLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.DataLayout.setContentsMargins(0, 0, 0, 0)
        self.DataLayout.setSpacing(10)
        # self.DataLayout.setGeometry(QtCore.QRect(1000, 430, 291, 191))
        self.DataLayout.setObjectName("DataLayout")
        
        self.NameLabel = QtWidgets.QLabel(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Browallia New")
        font.setPointSize(22)
        self.NameLabel.setFont(font)
        self.NameLabel.setStyleSheet("color: rgb(10,60,155);")
        self.NameLabel.setObjectName("NameLabel")
        self.DataLayout.addWidget(self.NameLabel)
        
        self.TextBox = QtWidgets.QLineEdit(self.wid0)
        self.TextBox.setText("-")
        self.TextBox.setGeometry(QtCore.QRect(1535, 565, 215, 30))
        self.TextBox.setAlignment(QtCore.Qt.AlignCenter)  
        self.TextBox.setMaxLength(20)
        # self.TextBox2 = QLineEdit(self)
        # self.TextBox2.move(20, 20)
        # self.TextBox.resize(20, 30)
        self.TextBox.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"color: rgb(10,60,155);\n"
"border-style: solid;\n"
"border-color: rgb(10,60,155);\n"
"border-width: 3px;\n"
"border-radius: 10px;\n"
"padding-left: 1em;\n"
"padding-right: 1em;\n"
"text-align: center;\n"
"font-size: 22px;\n"
"font-family: Browallia New;")
        font = QtGui.QFont()
        # font.setFamily("Browallia New")
        # font.setPointSize(50)
        # self.DataLayout.addWidget(self.TextBox)
        self.TextBox.hide()
        
        self.ChangeButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Browallia New")
        font.setPointSize(22)
        self.ChangeButton.setFont(font)
        self.ChangeButton.setStyleSheet("background-color: rgb(100, 255, 100);\n"
"color: dark-green;\n"
"border-style: solid;\n"
"border-color: dark-green;\n"
"border-width: 3px;\n"
"border-radius: 10px;\n"
"font-size: 22px;")
        self.ChangeButton.setCheckable(False)
        self.ChangeButton.setObjectName("ChangeButton")
        self.ChangeButton.clicked.connect(self.click_to_change_name)
        self.DataLayout.addWidget(self.ChangeButton)
        self.ChangeButton.hide()

        self.StatusLabel = QtWidgets.QLabel(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Browallia New")
        font.setPointSize(22)
        self.StatusLabel.setFont(font)
        self.StatusLabel.setStyleSheet("color: rgb(10,60,155);")
        self.StatusLabel.setObjectName("StatusLabel") 
        self.DataLayout.addWidget(self.StatusLabel)
        
        self.DetectedLabel = QtWidgets.QLabel(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Browallia New")
        font.setPointSize(22)
        self.DetectedLabel.setFont(font)
        self.DetectedLabel.setStyleSheet("color: rgb(10,60,155);")
        self.DetectedLabel.setObjectName("DetectedLabel")
        self.DataLayout.addWidget(self.DetectedLabel)
        
        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(self.wid0)
        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(1600, 950, 284, 54))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        
        self.TimeStampLabel = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        self.TimeStampLabel.setContentsMargins(0, 0, 0, 0)
        self.TimeStampLabel.setSpacing(0)
        self.TimeStampLabel.setObjectName("TimeStampLabel")
        
        self.DateLabel = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        font = QtGui.QFont()
        font.setFamily("Browallia New")
        font.setPointSize(12)
        self.DateLabel.setFont(font)
        self.DateLabel.setStyleSheet("color: rgb(10,60,155);")
        self.DateLabel.setObjectName("DateLabel")
        self.TimeStampLabel.addWidget(self.DateLabel)
        
        self.TimeLabel = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        font = QtGui.QFont()
        font.setFamily("Browallia New")
        font.setPointSize(12)
        self.TimeLabel.setFont(font)
        self.TimeLabel.setStyleSheet("color: rgb(10,60,155);")
        self.TimeLabel.setObjectName("TimeLabel")
        self.TimeStampLabel.addWidget(self.TimeLabel)
        
        self.Logo = QtWidgets.QLabel(self.wid0)
        self.Logo.setGeometry(QtCore.QRect(1350, 320, 81, 81))
        self.Logo.setText("")
        self.Logo.setPixmap(QtGui.QPixmap("images/logo.png"))
        self.Logo.setScaledContents(True)
        self.Logo.setObjectName("Logo")
        
        self.AppNameLabel = QtWidgets.QLabel(self.wid0)
        self.AppNameLabel.setGeometry(QtCore.QRect(1500, 335, 300, 65))
        font = QtGui.QFont()
        font.setFamily("Impact")
        font.setPointSize(22)
        self.AppNameLabel.setFont(font)
        self.AppNameLabel.setStyleSheet("color: rgb(10,60,155);")
        self.AppNameLabel.setObjectName("AppNameLabel")
        
        self.AmountLabel = QtWidgets.QLabel(self.verticalLayoutWidget)
        # self.AmountLabel.setGeometry(QtCore.QRect(1450, 750, 221, 63))
        font = QtGui.QFont()
        font.setFamily("Browallia New")
        font.setPointSize(22)
        self.AmountLabel.setFont(font)
        self.AmountLabel.setStyleSheet("color: rgb(10,60,155);")
        self.AmountLabel.setObjectName("AmountLabel")
        self.DataLayout.addWidget(self.AmountLabel)

        self.WarningLabel = QtWidgets.QLabel(self.wid0)
        self.WarningLabel.setGeometry(QtCore.QRect(150, 80, 1600, 100))
        font = QtGui.QFont()
        font.setFamily("Browallia New")
        font.setPointSize(40)
        self.WarningLabel.setFont(font)
        self.WarningLabel.setStyleSheet("color: rgb(200,0,0);")
        self.WarningLabel.setObjectName("WarningLabel")

        # self.list_left = ["images/directions/Red_Left.png", "images/directions/Green_Left.png", "images/directions/Yellow_Left.png"]
        # self.list_cen = ["images/directions/Red_Center.png", "images/directions/Green_Center.png", "images/directions/Yellow_Center.png"]
        # self.list_right = ["images/directions/Red_Right.png", "images/directions/Green_Right.png", "images/directions/Yellow_Right.png"]
        self.list_banner = ["images/White.png", "images/Black.png"]
        self.r_var = 1
        self.Logo_2 = QtWidgets.QLabel(self.wid0)
        self.Logo_2.setGeometry(QtCore.QRect(0, 0, 1920, 81))
        self.Logo_2.setText("")
        self.Logo_2.setPixmap(QtGui.QPixmap(self.list_banner[self.r_var]))
        self.Logo_2.setScaledContents(True)
        self.Logo_2.setObjectName("Logo_2")

        # self.Logo_3 = QtWidgets.QLabel(self.wid0)
        # self.Logo_3.setGeometry(QtCore.QRect(915, 0, 81, 81))
        # self.Logo_3.setText("")
        # self.Logo_3.setPixmap(QtGui.QPixmap(self.list_cen[1]))
        # self.Logo_3.setScaledContents(True)
        # self.Logo_3.setObjectName("Logo_3")
        
        # self.Logo_4 = QtWidgets.QLabel(self.wid0)
        # self.Logo_4.setGeometry(QtCore.QRect(1832, 0, 81, 81))
        # self.Logo_4.setText("")
        # self.Logo_4.setPixmap(QtGui.QPixmap(self.list_right[2]))
        # self.Logo_4.setScaledContents(True)
        # self.Logo_4.setObjectName("Logo_4")

        self.CheckBoxDebug = QtWidgets.QCheckBox(self.wid0)
        self.CheckBoxDebug.setGeometry(QtCore.QRect(1400, 950, 100, 54)) 
        self.CheckBoxDebug.setText("Debug Mode")
        self.CheckBoxDebug.setChecked(False)
        self.CheckBoxDebug.stateChanged.connect(self.debug_mode_swap)
        font = QtGui.QFont()
        font.setFamily("Browallia New")
        font.setPointSize(12)
        self.CheckBoxDebug.setFont(font)
        self.CheckBoxDebug.setStyleSheet("color: rgb(10,60,155);")
        self.StatusLabel.hide()
        self.AmountLabel.hide()
        self.DetectedLabel.hide()

        # 2 WIDGETS
        self.wid1 = QWidget()
        self.wid1.setStyleSheet("""background: blue;""")
        self.wid1.setFixedSize(1920, 1080)
        self.wid1.move(0, 0)
        
         # wid2 is Enter Passcode Page
        self.wid2 = QWidget()
        self.wid2.setFixedSize(1920, 1080)
        self.wid2.move(0, 0)
        self.FacialRecognitionScreen2 = QtWidgets.QLabel(self.wid2)
        self.FacialRecognitionScreen2.setGeometry(QtCore.QRect(175, 190, 1024, 768))
        self.FacialRecognitionScreen2.setStyleSheet("background-color: rgb(0, 0, 0);\n"
"border-style: solid;\n"
"border-color: rgb(210, 210, 210);\n"
"border-width: 10px;\n"
"border-radius: 20px;")
        self.FacialRecognitionScreen2.setObjectName("FacialRecognitionScreen2")
        self.FacialRecognitionBorder2 = QtWidgets.QLabel(self.wid2)
        self.FacialRecognitionBorder2.setGeometry(QtCore.QRect(175, 190, 1024, 768))
        self.FacialRecognitionBorder2.setStyleSheet("background-color: transparent;\n"
"border-style: solid;\n"
"border-color: rgb(210, 210, 210);\n"
"border-width: 10px;\n"
"border-radius: 20px;")
        self.FacialRecognitionBorder2.setObjectName("FacialRecognitionBorder2")

        self.paddingWidget = QtWidgets.QWidget(self.wid0)
        self.paddingWidget.setGeometry(QtCore.QRect(1450, 530, 300, 300))
        self.paddingWidget.setObjectName("paddingWidget")
        
        self.TextBox2 = QtWidgets.QLineEdit(self.paddingWidget)
        self.TextBox2.setAlignment(QtCore.Qt.AlignCenter) 
        self.TextBox2.setMaxLength(4)
        self.TextBox2.setEchoMode(QLineEdit.Password)
        # self.TextBox2 = QLineEdit(self)
        # self.TextBox2.move(20, 20)
        self.TextBox2.resize(300, 90)
        self.TextBox2.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"color: rgb(10,60,155);\n"
"border-style: solid;\n"
"border-color: rgb(10,60,155);\n"
"border-width: 5px;\n"
"border-radius: 20px;\n"
"padding-left: 1em;\n"
"padding-right: 1em;\n"
"font-size: 50px;")
        font = QtGui.QFont()
        font.setFamily("Browallia New")
        # font.setPointSize(50)
        # real_data.real_passcode = self.TextBox2.text().join("")

        self.TheFirstLine = QtWidgets.QWidget(self.paddingWidget)
        self.TheFirstLine.setGeometry(QtCore.QRect(415, 50, 800, 50))
        self.TheFirstLine.setObjectName("TheFirstLine")

        self.TheFirstButtonLayout = QtWidgets.QHBoxLayout(self.paddingWidget)
        self.TheFirstButtonLayout.setContentsMargins(0, 0, 0, 0)
        self.TheFirstButtonLayout.setSpacing(50)
        self.TheFirstButtonLayout.setObjectName("TheFirstButtonLayout")

        self.L_Button = QtWidgets.QPushButton(self.TheFirstLine)
        font = QtGui.QFont()
        font.setFamily("Browallia New")
        font.setPointSize(22)
        self.L_Button.setFont(font)
        self.L_Button.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"color: rgb(10,60,155);\n"
"border-style: solid;\n"
"border-color: rgb(10,60,155);\n"
"border-width: 5px;\n"
"border-radius: 20px;\n"
"font-size: 50px;")
        self.L_Button.setCheckable(False)
        self.L_Button.setObjectName("L_Button")
        self.L_Button.clicked.connect(self.L_pressed)
        self.TheFirstButtonLayout.addWidget(self.L_Button)

        self.C_Button = QtWidgets.QPushButton(self.TheFirstLine)
        font = QtGui.QFont()
        font.setFamily("Browallia New")
        font.setPointSize(22)
        self.C_Button.setFont(font)
        self.C_Button.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"color: rgb(10,60,155);\n"
"border-style: solid;\n"
"border-color: rgb(10,60,155);\n"
"border-width: 5px;\n"
"border-radius: 20px;\n"
"font-size: 50px;")
        self.C_Button.setCheckable(False)
        self.C_Button.setObjectName("C_Button")
        self.C_Button.clicked.connect(self.C_pressed)
        self.TheFirstButtonLayout.addWidget(self.C_Button)

        self.R_Button = QtWidgets.QPushButton(self.TheFirstLine)
        font = QtGui.QFont()
        font.setFamily("Browallia New")
        font.setPointSize(22)
        self.R_Button.setFont(font)
        self.R_Button.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"color: rgb(10,60,155);\n"
"border-style: solid;\n"
"border-color: rgb(10,60,155);\n"
"border-width: 5px;\n"
"border-radius: 20px;\n"
"font-size: 50px;")
        self.R_Button.setCheckable(False)
        self.R_Button.setObjectName("R_Button")
        self.R_Button.clicked.connect(self.R_pressed)
        self.TheFirstButtonLayout.addWidget(self.R_Button)
    
        ### Default Hide ###
        self.paddingWidget.hide()

        self.horizontalLayoutWidget2 = QtWidgets.QWidget(self.wid2)
        self.horizontalLayoutWidget2.setGeometry(QtCore.QRect(415, 900, 800, 50))
        self.horizontalLayoutWidget2.setObjectName("horizontalLayoutWidget2")
        self.ButtonLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget2)
        self.ButtonLayout.setContentsMargins(0, 0, 0, 0)
        self.ButtonLayout.setSpacing(50)
        self.ButtonLayout.setObjectName("ButtonLayout")
        
        
        self.BackButton = QtWidgets.QPushButton(self.horizontalLayoutWidget2)
        font = QtGui.QFont()
        font.setFamily("Browallia New")
        font.setPointSize(22)
        self.BackButton.setFont(font)
        self.BackButton.setStyleSheet("background-color: rgb(255, 150, 150);\n"
"color: rgb(220, 0, 0);\n"
"border-style: solid;\n"
"border-color: rgb(220, 0, 0);\n"
"border-width: 5px;\n"
"border-radius: 20px;")
        self.BackButton.setCheckable(False)
        self.BackButton.setObjectName("BackButton")
        self.BackButton.clicked.connect(self.PasscodeScreenSwap) # Function For Screen Swap (Transtion to Passcode Screen)
        self.ButtonLayout.addWidget(self.BackButton)
     
        self.horizontalLayoutWidget_3 = QtWidgets.QWidget(self.wid2)
        self.horizontalLayoutWidget_3.setGeometry(QtCore.QRect(1600, 0, 284, 54))
        self.horizontalLayoutWidget_3.setObjectName("horizontalLayoutWidget_3")
        self.TimeStampLabel2 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_3)
        self.TimeStampLabel2.setContentsMargins(0, 0, 0, 0)
        self.TimeStampLabel2.setSpacing(0)
        self.TimeStampLabel2.setObjectName("TimeStampLabel2")
        self.DateLabel2 = QtWidgets.QLabel(self.horizontalLayoutWidget_3)
        font = QtGui.QFont()
        font.setFamily("Browallia New")
        font.setPointSize(12)
        self.DateLabel2.setFont(font)
        self.DateLabel2.setStyleSheet("color: rgb(10,60,155);")
        self.DateLabel2.setObjectName("DateLabel2")
        self.TimeStampLabel2.addWidget(self.DateLabel2)
        self.TimeLabel2 = QtWidgets.QLabel(self.horizontalLayoutWidget_3)
        font = QtGui.QFont()
        font.setFamily("Browallia New")
        font.setPointSize(12)
        self.TimeLabel2.setFont(font)
        self.TimeLabel2.setStyleSheet("color: rgb(10,60,155);")
        self.TimeLabel2.setObjectName("TimeLabel2")
        self.TimeStampLabel2.addWidget(self.TimeLabel2)
        self.Logo = QtWidgets.QLabel(self.wid2)
        self.Logo.setGeometry(QtCore.QRect(650, 10, 81, 81))
        self.Logo.setText("")
        self.Logo.setPixmap(QtGui.QPixmap("images/logo.png"))
        self.Logo.setScaledContents(True)
        self.Logo.setObjectName("Logo")
        self.AppNameLabel2 = QtWidgets.QLabel(self.wid2)
        self.AppNameLabel2.setGeometry(QtCore.QRect(800, 25, 300, 65))
        font = QtGui.QFont()
        font.setFamily("Impact")
        font.setPointSize(22)
        self.AppNameLabel2.setFont(font)
        self.AppNameLabel2.setStyleSheet("color: rgb(10,60,155);")
        self.AppNameLabel2.setObjectName("AppNameLabel2")


        # LAYOUT CONTAINER FOR WIDGETS AND BUTTON
        # self.swapScreen.addWidget(self.EnterPasscodeButton)
        self.swapScreen.addWidget(self.wid0)
        self.swapScreen.addWidget(self.wid1)
        self.swapScreen.addWidget(self.wid2)

        # ENTERING LAYOUT
        self.centralwidget.setLayout(self.swapScreen)

        
        MainWindow.setCentralWidget(self.centralwidget)


        # WHICH WIDGET IS ON THE FRONT
        self.front_wid = 0

        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # self.CancelButton.clicked.connect(self.close)
       
    ### Default Data Funtion ###

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "User Authentication"))
        # self.StartButton.setText(_translate("MainWindow", "Start"))
        # self.CancelButton.setText(_translate("MainWindow", "Cancel"))
        self.BackButton.setText(_translate("MainWindow", "Back"))
        # self.EnterPasscodeButton.setText(_translate("MainWindow", "Enter Passcode"))
        self.L_Button.setText(_translate("MainWindow", "L"))
        self.C_Button.setText(_translate("MainWindow", "C"))
        self.R_Button.setText(_translate("MainWindow", "R"))
        self.ChangeButton.setText(_translate("MainWindow", "ยืนยัน"))
        self.NameLabel.setText(_translate("MainWindow", "Name : -"))
        self.StatusLabel.setText(_translate("MainWindow", "Password : -"))
        self.DetectedLabel.setText(_translate("MainWindow", "Detected : -"))
        self.DateLabel.setText(_translate("MainWindow", "Date : -"))
        self.TimeLabel.setText(_translate("MainWindow", "Time : -"))
        self.AppNameLabel.setText(_translate("MainWindow", "User Authentication"))
        self.DateLabel2.setText(_translate("MainWindow", "Date : -"))
        self.TimeLabel2.setText(_translate("MainWindow", "Time : -"))
        self.AppNameLabel2.setText(_translate("MainWindow", "User Authentication"))
        self.AmountLabel.setText(_translate("MainWindow", "Amount : 0"))
        self.WarningLabel.setText(_translate("MainWindow", ""))

    ### Real-Time Function ###
     
    def edit_time(self, date, time):
        # self.NameLabel.setText(("Name : %s") %(name))
        self.DateLabel.setText(("Date : %s ") %(date))
        self.TimeLabel.setText(("Time : %s ") %(time))

        self.DateLabel2.setText(("Date : %s ") %(date))
        self.TimeLabel2.setText(("Time : %s ") %(time))

    def update_time(self):
        self.edit_time(
            dtime.datetime.now().date().strftime('%d %b %Y'), 
            dtime.datetime.now().time().strftime('%H:%M:%S'),
            # self.name
        )
        # print("Time Update")
        
    def edit_name(self, name):
        if len(name) > 15:
            name = name[0:15] + "..."
        self.NameLabel.setText(("Name : %s") %(name))
        if name != "-" and self.ever_change == False:
            self.TextBox.show()
            self.ChangeButton.show()
        if self.TextBox.text() == "-":
            self.TextBox.setText(face_data.name)

    def update_name(self):
        self.edit_name(face_data.name)
        # print("Name Update")

    def click_to_change_name(self):
        self.ever_change = True
        status_data.warning_data = "กรุณามองสัญลักษณ์วงกลม จุดมองซ้าย กลางและขวา ด้านบน เพื่อป้อนรหัสผ่าน"
        self.ChangeButton.hide()
        face_data.name = self.TextBox.text()
        print(face_data.name)
        self.TextBox.hide()
        real_data.flag = True
        
    # def update_real_data(self):
        # if real_data.flag == True:

    def edit_warning(self, text):
        self.WarningLabel.setText(("%s") %(text))
        # print(name)

    def update_warning(self):
        self.edit_warning(status_data.warning_data)
        # print("Name Update")

    def update_point(self):
        if len(real_data.real_list) != self.list_amount:
            a_var = randrange(2)
            while (a_var == self.r_var):
                if a_var == self.r_var:
                    a_var = randrange(2)
            self.r_var = a_var
            self.Logo_2.setPixmap(QtGui.QPixmap(self.list_banner[self.r_var]))
        if self.list_amount != 4:
            self.list_amount = len(real_data.real_list)
        else:
            self.list_amount = 0

    def edit_status(self, status):
        self.StatusLabel.setText(("Password : %s") %(status))
        # print(status)

    def update_status(self):
        self.edit_status(status_data.status)
        # print("status Update")

    def edit_detected(self, detected):   
        self.DetectedLabel.setText(("Detected : %s") %(detected)) 

    def update_detected(self):
        now_user = db.collection('register').where('name', '==', face_data.name).stream()
        now_user_json = {}
        if len(real_data.real_list) == 4:
            doc_ref = db.collection(u'face_recognition').document()
            doc_ref.set({
                u'name': face_data.name, # Now 
                u'date': date,
                u'time': time,
                u'input_code': real_data.real_list # If program gets 4-digit of password
            })
            for doc in now_user:
                now_user_json = doc.to_dict()
            if len(now_user_json) != 0 and now_user_json['password'] == real_data.real_list:
                doc_ref = db.collection(u'result').document()
                doc_ref.set({
                    u'name': face_data.name, # Now 
                    u'date': date,
                    u'time': time
                })
                status_data.warning_data  = "ยินดีต้อนรับ คุณ " + face_data.name
                print("Checked !")
                status_data.detected = True
                status_data.amount += 1
                # For Next Person
                face_data.name = "-"
                self.ever_change = False
            else:
                status_data.detected = False
                self.paddingWidget.show()
                status_data.warning_data  = "กรุณาลองกรอกรหัสผ่านใหม่ด้วยแป้นพิมพ์"
            real_data.flag = False
            real_data.real_list = []
        self.edit_detected(status_data.detected)

    def edit_amount(self, amount):
        self.AmountLabel.setText(("Amount : %d") %(amount))
        # print(detected)

    def update_amount(self):
        self.edit_amount(status_data.amount)
        # print("status Update")

    def L_pressed(self):
        text = self.TextBox2.text()
        text += "L"
        self.TextBox2.setText(text) 

    def C_pressed(self):
        text = self.TextBox2.text()
        text += "C"
        self.TextBox2.setText(text)

    def R_pressed(self):
        text = self.TextBox2.text()
        text += "R"
        self.TextBox2.setText(text)

    def keyPressEvent(self, event):
        if event.key() == QtCore.Qt.Key_L:
            text = self.TextBox2.text()
            text += "L"
            self.TextBox2.setText(text) 
        if event.key() == QtCore.Qt.Key_C:
            text = self.TextBox2.text()
            text += "C"
            self.TextBox2.setText(text)
        if event.key() == QtCore.Qt.Key_R:
            text = self.TextBox2.text()
            text += "R"
            self.TextBox2.setText(text) 

    def update_textbox(self):
        now_user = db.collection('register').where('name', '==', face_data.name).stream()
        now_user_json = {}
        if len(self.TextBox2.text()) == 4:
            text_list = [i for i in self.TextBox2.text()]
            doc_ref = db.collection(u'face_recognition').document()
            doc_ref.set({
                u'name': face_data.name, # Now 
                u'date': date,
                u'time': time,
                u'input_code': text_list # If program gets 4-digit of password
            })
            for doc in now_user:
                now_user_json = doc.to_dict()
            if len(now_user_json) != 0 and now_user_json['password'] == text_list:
                doc_ref = db.collection(u'result').document()
                doc_ref.set({
                    u'name': face_data.name, # Now 
                    u'date': date,
                    u'time': time
                })   
                status_data.warning_data  = "ยินดีต้อนรับ คุณ " + face_data.name
                print("Checked !")
                status_data.detected = True
                status_data.amount += 1
                # For Next Person
                self.paddingWidget.hide()
                face_data.name = "-"
                self.ever_change = False

            elif real_data.count_times < 2:
                status_data.detected = False
                status_data.warning_data  = "กรุณาลองกรอกรหัสผ่านใหม่ด้วยแป้นพิมพ์อีกครั้ง"
                real_data.count_times += 1
            else:
                self.paddingWidget.hide()
                face_data.name = "-"
                self.ever_change = False
                status_data.warning_data  = "กรุณาลองใหม่อีกครั้งในภายหลัง"
                
            real_data.flag = False
            self.TextBox2.setText("")

        # if len(self.keyPressed) == 4:
        #     self.TextBox2.setText(self.keyPressed)
        #     self.keyPressed = ""
        # self.TextBox2.setText(self.keyPressed)
        # print("status Update")
 
    def PasscodeScreenSwap(self):
        # LOGIC TO SWITCH
        if self.front_wid == 0:
            self.wid0.hide()
            self.wid2.show()
            self.front_wid = 2
        else:
            self.wid0.show()
            self.wid2.hide()
            self.front_wid = 0

    @pyqtSlot(int)
    def debug_mode_swap(self, state):
        if state == Qt.Checked:
            self.TextBox.setGeometry(QtCore.QRect(1535, 465, 215, 30))
            self.CheckBoxDebug.setChecked(True)
            self.StatusLabel.show()
            self.AmountLabel.show()
            self.DetectedLabel.show()
        if state != Qt.Checked:
            self.TextBox.setGeometry(QtCore.QRect(1535, 565, 215, 30))
            self.CheckBoxDebug.setChecked(False)
            self.StatusLabel.hide()
            self.AmountLabel.hide()
            self.DetectedLabel.hide()

    def check_blink(self):
        if real_data.blink_flag == True:
        #     self.timer = QTimer()
        #     self.timer.setSingleShot(False)
        #     self.timer.timeout.connect(self.click_to_change_name)
            if self.ever_change == False:
                self.click_to_change_name()
            else:
                self.ever_change == False
                real_data.blink_flag = False
        
              